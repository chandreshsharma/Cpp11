#include <iostream>
#include <sstream>

#include <random>   // Library for the random numbers


/*********
    A program to understand the random number support in C++ 11.

The random header provides support for generating both pseudo-random and 
true random numbers if the state is available.

The random numbers are generated using combinations of Random Number Engines and distributions.

.   Engines:        The random number engine generate both pseudo-random and true random number if the sources are available.

.   Distributions:  Objects that transform the number sequences generated by a random number generator 
                    into a Statistical Distribution.


Random number engines:

The STL provides 16 random engines that can be used.

Random number engines generate pseudo-random numbers using seed data as entropy source. 
Several different classes of pseudo-random number generation algorithms are implemented as templates.

Pseudo-random number engines (instantiations)

	default_random_engine       Default random engine (class )
	minstd_rand                 Minimal Standard minstd_rand generator (class )
	minstd_rand0                Minimal Standard minstd_rand0 generator (class )
	mt19937                     Mersenne Twister 19937 generator (class )
	...

Non-deterministic random number generator:
	random_device               True random number generator (class ) that produces non-deterministic random numbers

Random number engine adaptors:
Random number engine adaptors generate pseudo-random numbers using another random number engine 
as an entropy source.

    discard_block_engine        discards some output of a random number engine
    independent_bits_engine     packs the output of a random number engine into blocks of a specified number of bits 
    shuffle_order_engine        delivers the output of a random number engine in a different order

*********/

void print(std::default_random_engine e, int n)
{
    while(n--)
    {
        std::cout << e() << ", ";
    }
    std::cout << std::endl;
}

int main()
{
    std::default_random_engine def;     // Instantiate the default random engine.
    
    std::cout << def() << ", " << def() << std::endl;

    // The default_randon_engine generates the same number with the same state.

    std::stringstream ss; ss << def;        // Save the current state.
    
    std::cout << "At Current State  :" << def() << ", " << def() << std::endl;
    std::cout << "New State         :" << def() << ", " << def() << std::endl;

    ss >> def;                           // Restore the state of the engine
    std::cout << "Restoring State   :" << def() << ", " << def() << std::endl;

    // Another example would be to create the random_engine simultaneously, so that they have the same states.
    // when the engines are created.

    std::default_random_engine e1;
    std::default_random_engine e2;

    print(e1, 5);
    print(e2, 5);

    //  To prevent the same value from being generated the default_random_engine needs to be provided 
    //  with a seed to be used when generating a value. This can be any value (unsigned int), which is sufficiently random.

/////// random_device

    // std::random_device is a uniformly-distributed integer random number generator 
    // that produces non-deterministic random numbers.

    // Seed with a real random value, if available
    std::random_device rd;
 
    std::default_random_engine e3(rd());
    std::default_random_engine e4(rd());    

    std::cout << "\nPrinting using random_device" << std::endl;
    print(e3, 5);
    print(e4, 5);    

/////// distribution
//	The distribution class transforms number sequences generated by a random number generator 
//  into a Statistical Distribution

// uniform_int_distribution:
	
	std::mt19937 mtGen(rd());	//// Seed the mt19937 generator.
	std::uniform_int_distribution<>	nDis(1,6);  // Create a uniform integer distribution in the range of 1 to 6

    std::cout << "uniform_int_distribution (1,6): " << std::endl;
	for(int i=0; i<10; ++i)
		std::cout << nDis(mtGen) << ", ";   // Use the mt19937 generator to generate random numbers in the uniform distribution	
	std::cout << std::endl;

// uniform_real_distribution:
	
	std::minstd_rand0 mnGen(rd());	//// Seed the mt19937 generator.
	std::uniform_real_distribution<> rDis(900,1000);  // Create a uniform real distribution in the range of 900 to 1000

    std::cout << "uniform_real_distribution(900,1000): " << std::endl;
	for(int i=0; i<10; ++i)
		std::cout << rDis(mnGen) << ", ";   // Use the minstd_rand0 to generate random numbers in the uniform distribution	
	std::cout << std::endl;

// gamma_distribution:
	
	std::gamma_distribution<double>	gDis(3.0,3.0);  // Create a gamma distribution

    std::cout << "gamma_distribution(3.0,3.0): " << std::endl;
	for(int i=0; i<10; ++i)
		std::cout << gDis(mtGen) << ", ";	
	std::cout << std::endl;

// normal_distribution:
	
	std::normal_distribution<>	nrDis(5.0,2.0); // Mean and Standard Deviation

    std::cout << "normal_distribution(5.0(Mean), 2.0(Standard Deviation): " << std::endl;
	for(int i=0; i<10; ++i)
		std::cout << nrDis(mnGen) << ", ";	
	std::cout << std::endl;	

    return 0;
}
